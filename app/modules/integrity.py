"""
Integrity module for SecureHide
Provides functionality for verifying message and file integrity
"""

import hashlib
import json
import base64


def calculate_hash(data, algorithm='sha256'):
    """
    Calculate a hash digest for the given data
    
    Args:
        data: Data to hash (string or bytes)
        algorithm: Hash algorithm to use ('sha256', 'sha512', etc.)
    
    Returns:
        Hash digest as a hexadecimal string
    """
    if algorithm not in hashlib.algorithms_guaranteed:
        raise ValueError(f"Unsupported hash algorithm: {algorithm}")
    
    hasher = hashlib.new(algorithm)
    
    # Convert string to bytes if necessary
    if isinstance(data, str):
        data = data.encode()
    
    hasher.update(data)
    return hasher.hexdigest()


def secure_message(message, metadata=None):
    """
    Add integrity protection to a message
    
    Args:
        message: Original message (string)
        metadata: Additional metadata to include (dict)
    
    Returns:
        Secured message package (dict)
    """
    # Create a package with the original message
    package = {
        'message': message,
        'metadata': metadata or {}
    }
    
    # Calculate the hash of the message
    package['hash'] = calculate_hash(message)
    package['hash_algorithm'] = 'sha256'
    
    return package


def verify_message(package):
    """
    Verify the integrity of a secured message
    
    Args:
        package: Secured message package (dict)
    
    Returns:
        Tuple of (is_valid, original_message, metadata)
    """
    # Extract the message and hash
    message = package['message']
    stored_hash = package['hash']
    algorithm = package.get('hash_algorithm', 'sha256')
    metadata = package.get('metadata', {})
    
    # Recalculate the hash
    calculated_hash = calculate_hash(message, algorithm)
    
    # Verify the hash
    is_valid = (calculated_hash == stored_hash)
    
    return is_valid, message, metadata


def secure_file(file_path, metadata=None):
    """
    Calculate a hash for a file to allow later verification
    
    Args:
        file_path: Path to the file
        metadata: Additional metadata to include (dict)
    
    Returns:
        Security info (dict)
    """
    # Calculate the hash of the file
    with open(file_path, 'rb') as f:
        file_hash = calculate_hash(f.read())
    
    # Create a security info object
    security_info = {
        'file_path': file_path,
        'hash': file_hash,
        'hash_algorithm': 'sha256',
        'metadata': metadata or {}
    }
    
    return security_info


def verify_file(file_path, security_info):
    """
    Verify the integrity of a file using previously calculated security info
    
    Args:
        file_path: Path to the file to verify
        security_info: Security info generated by secure_file()
    
    Returns:
        Tuple of (is_valid, metadata)
    """
    # Calculate the current hash of the file
    with open(file_path, 'rb') as f:
        current_hash = calculate_hash(f.read(), security_info.get('hash_algorithm', 'sha256'))
    
    # Compare with the stored hash
    stored_hash = security_info['hash']
    is_valid = (current_hash == stored_hash)
    
    return is_valid, security_info.get('metadata', {})


def combine_security(message_security, file_security):
    """
    Combine message and file security information
    
    Args:
        message_security: Security info for a message
        file_security: Security info for a file
    
    Returns:
        Combined security package
    """
    return {
        'message_security': message_security,
        'file_security': file_security,
        'timestamp': import_datetime().datetime.now().isoformat()
    }


def import_datetime():
    """Import datetime module dynamically to avoid circular imports"""
    import datetime
    return datetime


def serialize_security_info(security_info):
    """Convert security info to a string for embedding in steganography"""
    return json.dumps(security_info)


def deserialize_security_info(serialized_info):
    """Convert serialized security info back to a dict"""
    return json.loads(serialized_info)